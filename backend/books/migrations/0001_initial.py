# Generated by Django 4.1.5 on 2023-01-25 19:11

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('isbn_13', models.IntegerField(unique=True, validators=[django.core.validators.MaxValueValidator(9999999999999), django.core.validators.MinValueValidator(1000000000000)])),
                ('isbn_10', models.IntegerField(validators=[django.core.validators.MaxValueValidator(9999999999), django.core.validators.MinValueValidator(1000000000)])),
                ('publisher', models.CharField(max_length=50)),
                ('publication_year', models.IntegerField(validators=[django.core.validators.MaxValueValidator(3000), django.core.validators.MinValueValidator(0)])),
                ('page_cnt', models.PositiveIntegerField()),
                ('width', models.FloatField()),
                ('height', models.FloatField()),
                ('thickness', models.FloatField()),
                ('retail_price', models.FloatField()),
                ('authors', models.ManyToManyField(to='books.author')),
                ('genre', models.ManyToManyField(to='books.genre')),
            ],
        ),
    ]
